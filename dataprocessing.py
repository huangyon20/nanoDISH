import os
import pandas as pd
import numpy as np
import argparse

#mapping reads and events to references
def Dataprocess(ref,Rawfastq,Rawfast5,Summary,Workdir,name,mkindex,thread,method):
    #1. mapping reads to reference genomes using graphmap2 or minimap2
    outsam=Workdir+'/'+name+'.sam'
    if method=='graphmap2':
        print("The mapping method is grapmap2~")
        os.system(f'graphmap2 align -K auto --min-read-len 30  -a sg  -r  {ref}  -d  {Rawfastq}  -o {outsam} ') 
    if method=='minimap2':
        print("The mapping method is minimap2~")
        os.system(f'minimap2 --MD -ax map-ont {ref}  {Rawfastq}  > {outsam} ') 
    print('Mapping finished!')

    #2. filt the unmapped reads
    Forward_bam=Workdir+'/'+name+'.bam'
    os.system(f'samtools view  -O BAM -F 20 {outsam} | samtools sort  > {Forward_bam}')
    os.system(f'samtools index {Forward_bam}')
    print('Remove unmapped reads finished!')

    #3 align events to references
    Rawevent=Workdir+'/'+name+'.event'
    if mkindex:
        if Summary:
            os.system(f'nanopolish index -d  {Rawfast5} -s ${Summary} {Rawfastq}')
        else:
            os.system(f'nanopolish index -d  {Rawfast5}  {Rawfastq}')
        print('Reads indexing finished!')
    os.system(f'nanopolish eventalign -t {thread} --reads {Rawfastq} --bam {Forward_bam} --genome {ref} --print-read-names --scale-events > {Rawevent}')
    print('Event calling finished!')

#collapse events
def collapse_events(eventfile,outfile):
    df_iter = pd.read_csv(eventfile,sep='\t',skiprows=(0),header=(0), iterator=True, chunksize=50000) #read event file
    df = pd.concat([dfi for dfi in df_iter])
    print('Reading Event-file finished...')
    grouped = df.groupby(by=['contig', 'read_name', 'position']).agg({'reference_kmer':'first','event_level_mean':'mean','event_stdv':'mean','event_length':'sum'})
    #remove the redundant according to the contig, read_name, position,and  
    #keep the reference_kmer(keep the first one)，current_mean(calculate the mean value)，current_stdv(calculate the mean) and current length(calculate the sum).
    print('Group Event-file finished...')
    #filted=grouped.reset_index().groupby('read_name').filter(lambda x: len(x) > length*fraction) #filt read
    filted=grouped.reset_index()
    filted['event_stdv']=np.log(filted['event_stdv']) #logarithm of event_stdv
    filted['event_length']=np.log10(filted['event_length'])#log10 logarithm of event_stdv
    filted.to_csv(outfile,sep='\t',header=True, index=True)
    print('Event collapse finished!')
    
def args():
    """
    Get command line inputs
    Require: 
    graphmap2 or minimap2
    samtools
    nanopolish 
    """ 
    parser = argparse.ArgumentParser()
    parser.add_argument("-r", "--reference",  type=str, required=True,      help='The reference genome in fasta formats, multi refenreces are allowed in a single file.')
    parser.add_argument("-q", "--fastq",     type=str, required=True,       help='The raw fastq file generated by the MinKnow. The U in RNA sequencing fastq file should be changed to T.')
    parser.add_argument("-s", "--signal",     type=str, required=True,      help='The raw fast5 file path.')
    parser.add_argument("-S", "--summary",  type=str, default=False,     help='The sequencing summary file.')
    parser.add_argument("-d", "--output_dir",  type=str, required=True,     help='The output file path where to store the results.')
    parser.add_argument("-n", "--output_name",  type=str, default='out',    help='prefix of the output files，the default is (out).')
    parser.add_argument("-m", "--method",     type=str, default='graphmap2', help='The mapping methods, graphmap2 or minimap2. the default is (graphmap2).')
    parser.add_argument("-t", "--thread",    type=int, default=5,           help='the default is (5) .')
    parser.add_argument("-i", "--mkindex",  action='store_true', default=False, help='Making index of the fast5 is very slow, delete the parameter after the first run..')
    args = parser.parse_args()
    return args


if __name__ == "__main__":

    args = args()
    if not os.path.exists(args.reference):
        print(f'Reference not found: {args.reference}')
        exit()
    if not os.path.exists(args.fastq):
        print(f'fastq file not found: {args.fastq}')
        exit()
    if not os.path.exists(args.signal):
        print(f'fast5 file path not found: {args.signal}')
        exit()
    if not os.path.exists(args.output_dir):
        os.system(f'mkdir {args.output_dir}')

    assert args.method in ('graphmap2', 'minimap2'), "method should be one of graphmap2/minimap2"

    ref=args.reference
    Rawfastq=args.fastq
    Rawfast5=args.signal
    Summary=args.summary
    Workdir=args.output_dir 
    name=args.output_name
    mkindex=args.mkindex
    thread=args.thread
    method=args.method
    eventfile=args.output_dir+'/'+args.output_name+'.event'
    outenventfile=args.output_dir+'/'+args.output_name+'.collapsed.event'

    Dataprocess(ref,Rawfastq,Rawfast5,Summary,Workdir,name,mkindex,thread,method)
    collapse_events(eventfile,outenventfile)

